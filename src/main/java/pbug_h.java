// Generated by jextract

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
public final class pbug_h  {

    /* package-private */ pbug_h() {}
    @C("struct PARAMS")public static class PARAMS {

        /* package-private */ PARAMS() {}
        public static MemoryLayout $LAYOUT() {
            return pbug_h$constants$0.PARAMS$struct$LAYOUT();
        }
        @C("union ")public static class DUMMYUNION2 {

            /* package-private */ DUMMYUNION2() {}
            public static MemoryLayout $LAYOUT() {
                return pbug_h$constants$0.DUMMYUNION2$struct$LAYOUT();
            }
            @C("struct ")public static class Struct1 {

                /* package-private */ Struct1() {}
                public static MemoryLayout $LAYOUT() {
                    return pbug_h$constants$0.Struct1$struct$LAYOUT();
                }
                public static VarHandle flags1$VH() {
                    return pbug_h$constants$0.Struct1$flags1$VH();
                }
                public static  @C("int") int flags1$get(@C("struct ") MemorySegment seg) {
                    return (int)pbug_h$constants$0.Struct1$flags1$VH().get(seg);
                }
                public static  @C("int") int flags1$get(@C("struct ") MemorySegment seg, long index) {
                    return (int)pbug_h$constants$0.Struct1$flags1$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void flags1$set(@C("struct ") MemorySegment seg, @C("int") int x) {
                    pbug_h$constants$0.Struct1$flags1$VH().set(seg, x);
                }
                public static void flags1$set(@C("struct ") MemorySegment seg, long index, @C("int") int x) {
                    pbug_h$constants$0.Struct1$flags1$VH().set(seg.asSlice(index*sizeof()), x);
                }
                @C("union ")public static class DUMMYUNION1 {

                    /* package-private */ DUMMYUNION1() {}
                    public static MemoryLayout $LAYOUT() {
                        return pbug_h$constants$0.DUMMYUNION1$struct$LAYOUT();
                    }
                    @C("struct ")public static class Struct2 {

                        /* package-private */ Struct2() {}
                        public static MemoryLayout $LAYOUT() {
                            return pbug_h$constants$0.Struct2$struct$LAYOUT();
                        }
                        public static VarHandle flags3$VH() {
                            return pbug_h$constants$0.Struct2$flags3$VH();
                        }
                        public static  @C("int") int flags3$get(@C("struct ") MemorySegment seg) {
                            return (int)pbug_h$constants$0.Struct2$flags3$VH().get(seg);
                        }
                        public static  @C("int") int flags3$get(@C("struct ") MemorySegment seg, long index) {
                            return (int)pbug_h$constants$0.Struct2$flags3$VH().get(seg.asSlice(index*sizeof()));
                        }
                        public static void flags3$set(@C("struct ") MemorySegment seg, @C("int") int x) {
                            pbug_h$constants$0.Struct2$flags3$VH().set(seg, x);
                        }
                        public static void flags3$set(@C("struct ") MemorySegment seg, long index, @C("int") int x) {
                            pbug_h$constants$0.Struct2$flags3$VH().set(seg.asSlice(index*sizeof()), x);
                        }
                        public static long sizeof() { return $LAYOUT().byteSize(); }
                        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                        public static @C("struct []") MemorySegment allocateArray(int len) {
                            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                        }                        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                        }
                        public static @C("struct *") MemorySegment allocatePointer() {
                            return MemorySegment.allocateNative(C_POINTER);
                        }
                        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                            return scope.allocate(C_POINTER);
                        }
                        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
                    }

                    public static MemorySegment Struct2$slice(MemorySegment seg) {
                        return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
                    }
                    public static long sizeof() { return $LAYOUT().byteSize(); }
                    public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                    public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                    public static @C("union []") MemorySegment allocateArray(int len) {
                        return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                    }                    public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                        return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                    }
                    public static @C("union *") MemorySegment allocatePointer() {
                        return MemorySegment.allocateNative(C_POINTER);
                    }
                    public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                        return scope.allocate(C_POINTER);
                    }
                    public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
                }

                public static MemorySegment DUMMYUNION1$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 4));
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                public static @C("struct []") MemorySegment allocateArray(int len) {
                    return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                }                public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                    return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                }
                public static @C("struct *") MemorySegment allocatePointer() {
                    return MemorySegment.allocateNative(C_POINTER);
                }
                public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                    return scope.allocate(C_POINTER);
                }
                public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
            }

            public static MemorySegment Struct1$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
            }
            @C("struct ")public static class Struct2 {

                /* package-private */ Struct2() {}
                public static MemoryLayout $LAYOUT() {
                    return pbug_h$constants$0.Struct2$struct$LAYOUT();
                }
                public static VarHandle flags2$VH() {
                    return pbug_h$constants$0.Struct2$flags2$VH();
                }
                public static  @C("int") int flags2$get(@C("struct ") MemorySegment seg) {
                    return (int)pbug_h$constants$0.Struct2$flags2$VH().get(seg);
                }
                public static  @C("int") int flags2$get(@C("struct ") MemorySegment seg, long index) {
                    return (int)pbug_h$constants$0.Struct2$flags2$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void flags2$set(@C("struct ") MemorySegment seg, @C("int") int x) {
                    pbug_h$constants$0.Struct2$flags2$VH().set(seg, x);
                }
                public static void flags2$set(@C("struct ") MemorySegment seg, long index, @C("int") int x) {
                    pbug_h$constants$0.Struct2$flags2$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                public static @C("struct []") MemorySegment allocateArray(int len) {
                    return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                }                public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                    return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                }
                public static @C("struct *") MemorySegment allocatePointer() {
                    return MemorySegment.allocateNative(C_POINTER);
                }
                public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                    return scope.allocate(C_POINTER);
                }
                public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
            }

            public static MemorySegment Struct2$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("union []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("union *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment DUMMYUNION2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct PARAMS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct PARAMS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct PARAMS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct PARAMS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct PARAMS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct PARAMS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct PARAMS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

}


